/*
 * Collab desktop - Software for shared drawing via internet in real-time
 * Copyright (C) 2012 Martin Indra <aktive@seznam.cz>
 *
 * This file is part of Collab desktop.
 *
 * Collab desktop is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Collab desktop is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Collab desktop.  If not, see <http://www.gnu.org/licenses/>.
 */

package cz.mgn.collabdesktop.utils.gui;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Martin Indra <aktive@seznam.cz>
 */
public class CollabFileChooser<O> extends JFrame {

    protected FileChoosedInterface cInterface = null;
    protected O data = null;

    /**
     * Creates new form SaveAsImage
     */
    public CollabFileChooser(FileChoosedInterface<O> cInterface, O data, int x, int y, int dialogType, final String filesSuffix, String startFile) {
        this.cInterface = cInterface;
        this.data = data;
        setVisible(true);
        initComponents();
        x -= getWidth() / 2;
        y -= getHeight() / 2;
        setLocation(x, y);

        fileChooser.setDialogType(dialogType);
        fileChooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(filesSuffix);
            }

            @Override
            public String getDescription() {
                return "PNG image files";
            }
        });
        if (!startFile.isEmpty()) {
            fileChooser.setSelectedFile(new File(startFile));
        }
    }

    protected void choosed() {
        dispose();
        File file = fileChooser.getSelectedFile();
        if (file != null) {
            cInterface.fileChoosed(file, data);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Collab - file chooser");

        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });
        getContentPane().add(fileChooser, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
        if (JFileChooser.CANCEL_SELECTION.equals(evt.getActionCommand())) {
            dispose();
        } else if (JFileChooser.APPROVE_SELECTION.equals(evt.getActionCommand())) {
            choosed();
        }
    }//GEN-LAST:event_fileChooserActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileChooser;
    // End of variables declaration//GEN-END:variables
}
